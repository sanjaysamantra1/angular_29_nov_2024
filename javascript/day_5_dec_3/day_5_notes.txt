Arrow Function Benefits
=======================
-concise syntax
-implicit return
-ideal for callback
-good for small functions
-static 'this'


HigherOrder Function
====================
-A function can be called as HigherOrder function if that function has either of the below 2 abilities:
    a: function  takes another function as argument 
    b: function returns another function
-Array filter(), map() , reduce() , forEach() are HigherOrder

function incrementBy5(ele){
    return ele + 5;
}
let res1 = arr.map(incrementBy5); // map() is HigherOrder , incrementBy5 is callback
console.log(res1);
----------------------------
function test1(){
}
function test2(){ // test2() is HigherOrder , as it returns another function
    return test1;
}


Function Recursion
==================
-A function that calls itself until the program achieves the desired result.
-it should have a condition that stops the function calling itself.




Assignments:
const user = {
      name: "sanjay",
      age: 30,
      cars: ["tata", "honda"],
      address: {
        city: "bangalore",
        pin: [],
        xyz: {
          a: 10,
          b: [],
          c: 30,
          d: {
            e: [],
            f: {
              g: 1,
              h: []
            }
          }
        },
      },
      emails: [],
    };
   
1. write a function recursiveSearch() to print all the keys whose value is []
   output : email, pin , e , h 

2. var nestedObject = {
      data: {
        info: {
          stuff: {
            thing: {
              moreStuff: {
                magicNumber: 22,
                something: "hello",
                manyMoreStuff: {
                  number: 44,
                },
              },
            },
          },
        },
      },
    };
Q. Write a function contains() , which scans the object and returns true if the searched value is present 

contains(nestedObject, 44); // true
contains(nestedObject, "hello"); // true
contains(nestedObject, "hiii"); // false
