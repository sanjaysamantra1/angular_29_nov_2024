1. Download Nodejs and install
  https://nodejs.org/en/download/prebuilt-installer

2. Code Editor (Visual Studio Code)
   https://code.visualstudio.com/download
   

3. Git Setup 
   a. download an install git software
       https://git-scm.com/downloads
   b. create a git profile
      https://github.com/  (register)



GitHub Repository :
https://github.com/sanjaysamantra1/angular_29_nov_2024





DAY2-------------------------------------


FrontEnd : Develop User Interface of a web application

HTML - Content of a webpage ( Table, form , image ,audio, video, list)
CSS - for styling  ( color , border , placement of elements, background, width,height)
Bootstrap - Responsiveness + pre-defined components-table,carousel,modal,card
Javascript - behaviour of a webpage
Angular - Javascript framework (RAD,CLI,DataBinding,Form Validation,AJAX,Routing)

Javascript Frameworks : Angular / React / NextJs / VueJs / PolymerJs / knockoutJs



fipkart page
============
1. create an HTML file (flipkart.html) and html code
2. install vscode extension
   'open in browser'
3. open html file in browser 
   alt+b  / alt+shift+b
4. How to use css
   a. inline 
   b. internal (<style>)
   c. external (separate css file & include that css in html)
5. How to use Bootstrap (bootstrap 3/4/5)  (Twitter)
   include bootstrap CDN link in our HTML 
6. How to use Javascript 
   a. internal  (<script> tag)
   b. external  (separate javascript file & include that in html file)


Vscode shortcuts (EMMET)
========================
!    HTML code
table>tbody>tr*20>td*5{Data-$}







DAY3--------------------------------------------------------


HTML - content of a webpage
CSS - for styling
Bootstrap - Responsiveness + pre-defined components-table,carousel,modal,card
Javascript - behaviour of a webpage


How to run Javascript files
===========================
1. Browser (FronEnd Development)
   a. Create a javascript file & add Javascript code
   b. include that javascript file in HTML file using the below syntax
      <script src='abc.js' />
   c. open HTML file in Browser 
   
2. Nodejs (BackEnd Development)
   a. Install Nodejs
   b. Run the below command in command
      node <fileName.js>


        Browser                     Nodejs
=======================================================
1. window - yes                    1. window - No
2. document - yes                  2. document - No
3. File - No                       3. File - yes

   
Variables
=========
-Variables are containers for storing data values. 
 Variable is a name of memory location.
-Variables in Javascript can be declared by using either one of the below 3 keywords:
 1. var   
 2. let
 3. const

	var						let						 const
======================================================================
1.since begining		 1.ECMASCRIPT-6(2015)		1.ECMASCRIPT-6(2015)
2.value can be changed   2.value can be changed     2.cann't be changed
3.initialization is		 3.initialization is		3.mandatory
	not mandatory           not mandatory	
4.can be redeclared		 4.cann't be redeclared		4.cann't be redeclared
5.function/global		 6.block/function/global	6.block/function/global
6.TDZ - No			 	 5.TDZ - Yes				5.TDZ - Yes


Javascript : programming language, follows ECMASCRIPT standards
ECMASCRIPT : standard provider for javascript
ECMA : European Computer Menufacturer Association

ES-5    <2015       
ES-6    2015 (let , const , class , extends , module , spread , rest)
ES-7    2016 ( ** )
ES-8    2017
ES-9    2018
ES-10   2019
ES-11   2020
ES-12   2021
ES-13   2022
ES-14   2023
ES-15   2024





DAY 4---------------------------------------------------------


Use Strict
==========
-provides better coding standard and stronger error checking.
-'use strict' is only recognized at the beginning of a script or a function.
-JavaScript modules are automatically in strict mode, with no statement needed to initiate it.(import/export)
-The purpose of "use strict" is to execute the javascript in "strict mode".
-when 'use strict' is not written, browser runs the JS in normal mode.
-when 'use strict' is  written, browser runs the JS in strict mode.
-in Normal mode few mistakes are ignored, in strict mode mistakes are not ignored


1. variable declaration without var/let/const is not allowed.
   makes it impossible to accidentally create global variables.
2. function with duplicate arguements are not allowed.
3. NaN/undefined/Infinity cann't be used as a variable name.
4. Delete of an unqualified identifier in strict mode. 
    ex:delete Object.prototype; 
	var x = 5; delete x;
5. Multiple assignments not allowed.
   var a = b = c = 3;
6. 'this' is undefined, when a function is invoked from Global Context in strict mode.


functions
=========
1. Pre-Defined / inbuilt
  javascript inbuilt objects : console , document , window , Math , Array , Object
  console Object Methods : log() , table(), warn() , error() , time() , timeEnd()
  document Object Methods : write() , writeln()
  window Object methods : alert() , prompt() , confirm() , print(), close(), atob() , btoa()
  Math : max() , min(), sqrt(), cbrt()
2. User Defined
   a. Function declaration
   b. Function Expression
   c. Self invoked / IIFE 
   d. Arrow Function (ES-6) (2015)


How 'this' works in arrow function & regular function
=====================================================
regular : 'this' is calculated , how/where the function is invoked
           'this' is dynamic
arrow : 'this' is not calculated how  the function is invoked,
        'this' is decided from the place, where the arrow function is written
        'this' is not dynamic


Arrow function Limitations
==========================
1. arrow functions shouldn't used as object methods. dont use arrow functions inside objects
2. Don't use arrow function if 'this' should be dynamic inside a function


Assignments:
1. using prompt collect 2 values from user and perform all arithmetic operations on those 2 values





DAY-5


Arrow Function Benefits
=======================
-concise syntax
-implicit return
-ideal for callback
-good for small functions
-static 'this'


HigherOrder Function
====================
-A function can be called as HigherOrder function if that function has either of the below 2 abilities:
    a: function  takes another function as argument 
    b: function returns another function
-Array filter(), map() , reduce() , forEach() are HigherOrder

function incrementBy5(ele){
    return ele + 5;
}
let res1 = arr.map(incrementBy5); // map() is HigherOrder , incrementBy5 is callback
console.log(res1);
----------------------------
function test1(){
}
function test2(){ // test2() is HigherOrder , as it returns another function
    return test1;
}


Function Recursion
==================
-A function that calls itself until the program achieves the desired result.
-it should have a condition that stops the function calling itself.
